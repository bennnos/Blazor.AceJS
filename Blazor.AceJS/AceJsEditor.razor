@using Microsoft.JSInterop
@inherits ComponentBase
@implements IDisposable
@inject IJSRuntime JS

<div @ref="divElement" style="@Style" @onkeyup="TriggerAceInstance" @onpaste="TriggerAceInstance" @onkeydown="TriggerAceInstance" @onclick="TriggerAceInstance">@Value</div>

@code {
    [Parameter]
    public string Value { get; set; } = string.Empty;
    [Parameter]
    public string SelectedValue { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    [Parameter]
    public EventCallback<string> SelectedValueChanged { get; set; }
    [Parameter] public string Style { get; set; } = "height:100vh";
    [Parameter] public AceEditorOptions? Options { get; set; }
    private AceEditorOptions _options = new() { Language = AceLanguage.text, Theme = AceTheme.sqlserver };
    private ElementReference divElement;
    private DotNetObjectReference<AceJsEditor>? objRef;

    protected override void OnParametersSet()
    {
        if (Options is not null)
        {
            _options = Options;
        }
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("editorRender", divElement, _options.Language.ToString(), _options.Theme.ToString(), _options.IsReadOnly);
        }
    }

    private async Task TriggerAceInstance()
    {
        objRef ??= DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("GetCode", objRef, divElement);
    }

    [JSInvokable]
    public async Task ReceiveCode(string feedback)
    {
        Value = feedback;
        await ValueChanged.InvokeAsync(Value);
    }

    [JSInvokable]
    public async Task ReceiveSelectedCode(string feedback)
    {
        SelectedValue = feedback;
        await SelectedValueChanged.InvokeAsync(SelectedValue);
    }

    public async Task SetAceLanguageAsync(AceLanguage lang = AceLanguage.text)
    {
        await JS.InvokeVoidAsync("ace_set_mode", divElement, lang.ToString());
    }

    public async Task SetAceThemeAsync(AceTheme theme)
    {
        await JS.InvokeVoidAsync("ace_set_theme", divElement, theme.ToString());
    }

    public async Task SetAceReadonlyAsync(bool readOnly)
    {
        await JS.InvokeVoidAsync("ace_set_readonly", divElement, readOnly);
    }

    public async Task SetAceEditorParameters(AceEditorOptions opt)
    {
        Options = opt;
        await SetAceLanguageAsync(Options.Language);
        await SetAceReadonlyAsync(Options.IsReadOnly);
        await SetAceThemeAsync(Options.Theme);
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}
